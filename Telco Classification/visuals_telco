# ignore warnings
import warnings
warnings.filterwarnings("ignore")

import numpy as np
import pandas as pd
import prepare3
import acquire2
import matplotlib.ticker as mtick
import inflection

from itertools import cycle, islice
from matplotlib import cm
from scipy import stats
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix

import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style("white")




################################################################################

df = acquire2.get_telco_data(use_cache = True)
telco_df = prepare3.prep_telco_data(df)
train, test, validate = telco_df



#create data copy on train to work on visualizations
data_viz = train.copy()
data_viz.loc[:, 'churn'] = data_viz.loc[:, 'churn'].apply(lambda x: 'churn' if x == 'Yes' else 'retain')

#create horizontal stacked plot bar
#import inflection
def stacked_bar_plot(data, x, y, orient = 'horizontal', ax = None, show = True):
  # create axis if not present
  if ax == None:
    _, ax = plt.subplots(figsize = (8,6))
  
  # create crosstab based on the input data
  crosstab = pd.crosstab(index = data[x], columns = data[y], normalize = 'index')
  crosstab = crosstab.reindex(['retain', 'churn'], axis = 1)

  # visualize stacked barplot
  if orient == 'vertical':
    # order in descending (the highest value on the left)
    crosstab = crosstab.sort_values('churn', ascending = False)
    crosstab.plot(kind = 'bar', stacked = True, ax = ax)

    # add percentage label
    for i, index in enumerate(crosstab.index):
        for (proportion, y_loc) in zip(crosstab.loc[index], crosstab.loc[index].cumsum()):
          ax.text(x = i,
                  y = (y_loc - proportion) + (proportion / 2),
                  s = f'{proportion*100:.1f}%',
                  color = 'white',
                  fontsize = 14,
                  fontweight = 'bold',
                  horizontalalignment = 'center',
                  verticalalignment = 'center')
    # remove tick labels
    ax.set_yticklabels([])
  else: # default is horizontal bar plot, even if the orient input is an arbitrary value
    # orient in ascending (the highest value on the top)
    crosstab = crosstab.sort_values('churn', ascending = True)
    crosstab.plot(kind = 'barh', stacked = True, ax = ax)

    # add percentage label
    for i, index in enumerate(crosstab.index):
        for (proportion, x_loc) in zip(crosstab.loc[index], crosstab.loc[index].cumsum()):
          ax.text(y = i,
                  x = (x_loc - proportion) + (proportion / 2),
                  s = f'{proportion*100:.1f}%',
                  color = 'white',
                  fontsize = 14,
                  fontweight = 'bold',
                  horizontalalignment = 'center',
                  verticalalignment = 'center')
    # remove tick labels
    ax.set_xticklabels([])

  x_titleize = inflection.titleize(x)
  ax.set_title(f'Customer Churn Probability by {x_titleize}')      
  ax.set_xlabel('')
  ax.set_ylabel('')
  ax.legend(loc = 'center left', bbox_to_anchor=(1, 0.5), title = '', frameon = False)
  # ax.legend(loc='lower center', bbox_to_anchor=(0.5, 1), title='', ncol=2, frameon=False)
  sns.despine(left = True, bottom = True)

  if show:
    plt.show()


##################################################################################################################

def viz1():
    pie_data = data_viz['churn'].value_counts(normalize = True).values * 100
    pie_label = data_viz['churn'].value_counts(normalize = True).index.to_list()

    fig, ax = plt.subplots(figsize = (8, 6))

    wedges, texts, autotexts = ax.pie(pie_data, labels = pie_label,
                                    startangle = 90,
                                    explode = [0, 0.1],
                                    autopct = '%.0f%%',
                                    textprops = {'color': 'w', 'fontsize':16, 'weight': 'bold'})

    for i, wedge in enumerate(wedges):
        texts[i].set_color(wedge.get_facecolor())
    plt.tight_layout()
    plt.show()

##################################################################################################################


def viz2():
    cat_col = list(train.columns)
    cat_col.remove('tenure')
    cat_col.remove('monthly_charges')
    cat_col.remove('total_charges')

    #remove redundancies
    cat_col.remove('gender_encoded')
    cat_col.remove('partner_encoded')
    cat_col.remove('dependents_encoded')
    cat_col.remove('phone_service_encoded')
    cat_col.remove('paperless_billing_encoded')
    cat_col.remove('senior_citizen_encoded')
    cat_col.remove('multiple_lines_yes')
    cat_col.remove('online_security_yes')
    cat_col.remove('device_protection_yes')
    cat_col.remove('tech_support_yes')
    cat_col.remove('streaming_tv_yes')
    cat_col.remove('streaming_movies_yes')
    cat_col.remove('contract_type_one_year')
    cat_col.remove('contract_type_two_year')
    cat_col.remove('internet_service_type_fiber_optic')
    cat_col.remove('internet_service_type_none')
    cat_col.remove('payment_type_credit_card')
    cat_col.remove('payment_type_electronic_check')
    cat_col.remove('payment_type_mailed_check')

    #remove target variables
    cat_col.remove('churn')
    cat_col.remove('churn_encoded')

    columns = data_viz['churn']

    attr_crosstab = pd.DataFrame()

    for col in cat_col: #putting cols instead of col removes churn (desired result)
        #create crosstab for each attribute
        index = data_viz[col]
        ct = pd.crosstab(index = index, columns = columns, normalize = 'index', colnames = [None]).reset_index()
        
        #add prefix to each category
        #format : column name (category)
        
        col_titleize = inflection.titleize(col)
        ct[col] = ct[col].apply(lambda x: f'{col_titleize} ({x})')
        
        #rename the column
        
        ct.rename(columns = {col: 'attribute'}, inplace = True)
        
        #create a single dataframe
        attr_crosstab = pd.concat([attr_crosstab, ct])
        
    attr_crosstab = attr_crosstab.sort_values('churn', ascending = False).reset_index(drop = True)
    #new part is setting variable equal to background style
    attr_crosstab = attr_crosstab.style.background_gradient()
    return attr_crosstab


    #################################################################################################

def viz3():
    features = ['contract_type', 'internet_service_type', 'paperless_billing', 'payment_type']

    _, ax = plt.subplots(nrows = 1, ncols = 4, figsize = (20, 8), sharey = True)
    for i, feature in enumerate (features):
        sns.barplot(feature, 'churn_encoded', data = train, ax = ax[i], hue = 'senior_citizen')
        ax[i].set_xlabel('')
        ax[i].set_ylabel('Churn')
        ax[i].set_title(feature)
        ax[i].axhline(train.churn_encoded.mean(), ls = '--', color = 'red')

    sns.despine(left = True, bottom = True)
    plt.tight_layout()    
    plt.show()

###################################################################################################

